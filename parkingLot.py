# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JWYIKWlDcF9fMTt4LFky8SjC5RQ_JyLw
"""

class Vehicle:
    def __init__(self, reg_num, vehicle_type):
        self.reg_num = reg_num
        self.type = vehicle_type


class Queue:
    def __init__(self):
        self.items = []

    def enqueue(self, vehicle):
        self.items.append(vehicle)

    def dequeue(self):
        if not self.is_empty():
            return self.items.pop(0)
        else:
            return None

    def is_empty(self):
        if len(self.items) == 0:
          return True
        else:
          return False  


class ParkingSlot:
    def __init__(self, slot_id, vehicle_type):
        self.slot_id = slot_id
        self.type = vehicle_type
        self.is_available = True
        self.vehicle = None

    def assign_vehicle(self, vehicle):
        self.is_available = False
        self.vehicle = vehicle

    def remove_vehicle(self):
        self.is_available = True
        self.vehicle = None


class ParkingLot:
    def __init__(self, car_count, bike_count, truck_count):
        self.allowed_types = {"car", "bike", "truck"}
        self.slots = {"car": [], "bike": [], "truck": []}
        self.occupied_slots = {}
        self.waiting_queues = {
            "car": Queue(),
            "bike": Queue(),
            "truck": Queue()
        }
        self.initialize_slots(car_count, bike_count, truck_count)

    def initialize_slots(self, car_count, bike_count, truck_count):
        slot_id = 1
        for i in range(car_count):
            self.slots["car"].append(ParkingSlot(slot_id, "car"))
            slot_id += 1
        for i in range(bike_count):
            self.slots["bike"].append(ParkingSlot(slot_id, "bike"))
            slot_id += 1
        for i in range(truck_count):
            self.slots["truck"].append(ParkingSlot(slot_id, "truck"))
            slot_id += 1

    def park_vehicle(self, vehicle):
        if vehicle.type not in self.allowed_types:
            print("Error: Invalid vehicle type '" + vehicle.type + "'. Allowed types are car, bike, and truck.")
            return

        for slot in self.slots[vehicle.type]:
            if slot.is_available:
                slot.assign_vehicle(vehicle)
                self.occupied_slots[slot.slot_id] = slot
                print("The vehicle " + vehicle.reg_num + " is parked successfully at slot " + str(slot.slot_id) )
                return

        print("No available slot for " + vehicle.type + ". Vehicle " + vehicle.reg_num + " added to waiting queue.")
        self.waiting_queues[vehicle.type].enqueue(vehicle)

    def remove_vehicle(self, slot_id):
        if slot_id not in self.occupied_slots:
            print("Error: Slot " + str(slot_id) + " is not occupied or does not exist.")
            return

        slot = self.occupied_slots.pop(slot_id)
        vehicle_type = slot.type
        slot.remove_vehicle()
        print("Vehicle removed from slot " + str(slot_id) + ".")

        if not self.waiting_queues[vehicle_type].is_empty():
            vehicle = self.waiting_queues[vehicle_type].dequeue()
            slot.assign_vehicle(vehicle)
            self.occupied_slots[slot.slot_id] = slot
            print("Vehicle " + vehicle.reg_num + " from waiting queue parked at slot " + str(slot.slot_id) )

    def get_details(self):
        print("\n========= Parking Slot Details =========")
        for vehicle_type, slot_list in self.slots.items():
            print("\nType: " + vehicle_type.upper())
            for slot in slot_list:
                if slot.is_available:
                    print("Slot " + str(slot.slot_id) + ": [Available]")
                else:
                    print("Slot " + str(slot.slot_id) + ": [Occupied] by " + slot.vehicle.reg_num)


def main():
    lot = ParkingLot(2, 1, 1)

    while True:
        print("--- Parking Lot Menu ---")
        print("1. Park a vehicle")
        print("2. Remove a vehicle")
        print("3. View parking slot details")
        print("4. Exit")

        choice = input("Enter your choice (1-4): ")

        if choice == "1":
            reg_num = input("Enter vehicle registration number: ")
            v_type = input("Enter vehicle type (car/bike/truck): ").lower()
            vehicle = Vehicle(reg_num, v_type)
            lot.park_vehicle(vehicle)

        elif choice == "2":
            try:
                slot_id = int(input("Enter slot ID to remove vehicle from: "))
                lot.remove_vehicle(slot_id)
            except ValueError:
                print("Invalid input. Please enter a numeric slot ID.")

        elif choice == "3":
            lot.get_details()

        elif choice == "4":
            print("Exiting the program. Goodbye!")
            break

        else:
            print("Invalid choice. Please enter a number between 1 and 4.")


main()



