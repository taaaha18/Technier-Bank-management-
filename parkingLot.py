# -*- coding: utf-8 -*-
"""Untitled24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JWYIKWlDcF9fMTt4LFky8SjC5RQ_JyLw
"""

class vehicle:
    def __init__(self, num, type):
        self.reg_num = num
        self.type = type


class queue:
    def __init__(self):
        self.items = []

    def eque(self, vehicle):
        self.items.append(vehicle)

    def deque(self):
        return self.items.pop(0) if not self.isempty() else None

    def isempty(self):
        return len(self.items) == 0


class parkingSlot:
    def __init__(self, id, type):
        self.slot_id = id
        self.type = type
        self.isAvalable = True
        self.vehicle = None

    def assignV(self, vec):
        self.isAvalable = False
        self.vehicle = vec

    def removeV(self):
        self.isAvalable = True
        self.vehicle = None


class ParkingLot:
    def __init__(self, c, b, t):
        self.slots = {"car": [], "bike": [], "truck": []}
        self.occ = {}
        self.waitQ = {"car": queue(), "bike": queue(), "truck": queue()}
        self.initialize(c, b, t)

    def initialize(self, c, b, t):
        count = 1
        for i in range(c):
            self.slots['car'].append(parkingSlot(count, "car"))
            count += 1
        for i in range(b):
            self.slots['bike'].append(parkingSlot(count, "bike"))
            count += 1
        for i in range(t):
            self.slots['truck'].append(parkingSlot(count, "truck"))
            count += 1

    def parkvehicle(self, vehicle):
        for slot in self.slots[vehicle.type]:
            if slot.isAvalable:
                slot.assignV(vehicle)
                self.occ[slot.slot_id] = slot
                print("The vehicle is parked successfully.")
                return
        print("No available slot, added to waiting queue.")
        self.waitQ[vehicle.type].eque(vehicle)

    def removeV(self, id):
        if id not in self.occ:
            print("No vehicle found in the given slot.")
            return
        slot = self.occ.pop(id)
        v_type = slot.type
        slot.removeV()

        if not self.waitQ[v_type].isempty():
            vec = self.waitQ[v_type].deque()
            slot.assignV(vec)
            self.occ[slot.slot_id] = slot
            print(f"Vehicle {vec.reg_num} from waiting queue parked at Slot {slot.slot_id}.")

    def getDetail(self):
        print("Parking Slot Details are as follows:")
        for v_type, slotList in self.slots.items():
            print(f"\nType: {v_type.upper()}")
            for slot in slotList:
                if slot.isAvalable:
                    print(f"{slot.slot_id}: [Available]")
                else:
                    print(f"{slot.slot_id}: [Occupied] by {slot.vehicle.reg_num}")

def main():
  lot = ParkingLot(2, 1, 1)

  v1 = vehicle("ABC-123", "car")
  v2 = vehicle("XYZ-987", "car")
  v3 = vehicle("PQR-111", "car")

  lot.parkvehicle(v1)
  lot.parkvehicle(v2)
  lot.parkvehicle(v3)
  lot.getDetail()

  lot.removeV(1)

  lot.getDetail()

main()



